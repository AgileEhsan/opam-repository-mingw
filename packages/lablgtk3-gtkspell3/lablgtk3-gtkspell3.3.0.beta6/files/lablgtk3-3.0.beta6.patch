--- ./src/dune_config.ml
+++ ./src/dune_config.ml
@@ -10,6 +10,10 @@
     | None   -> error message
     | Some v -> v
 
+  let require_ok = function
+    | Error message -> error message
+    | Ok v -> v
+
   let cata ~f d = function
     | None -> d
     | Some x -> f x
@@ -26,15 +30,15 @@
   | _ ->
     package, []
 
-let query_pkg p ~package =
-  Option.require ~message:(package ^ " not found") C.Pkg_config.(query p ~package)
+let query_pkg p ~package ~expr =
+  Option.require_ok C.Pkg_config.(query_expr_err p ~package ~expr)
 
 let gen_pkg p ~package ~version =
   let file kind = kind ^ "-" ^ package ^ ".sexp" in
   let package, extra_flags = platform_subst p ~package in
-  let package =
+  let expr =
     Option.cata ~f:(fun version -> Format.sprintf "%s >= %s" package version) package version in
-  let c_g = query_pkg p ~package in
+  let c_g = query_pkg p ~package ~expr in
   C.Flags.write_sexp (file "cflag") @@ c_g.C.Pkg_config.cflags @ extra_flags;
   C.Flags.write_sexp (file "clink") c_g.C.Pkg_config.libs
 

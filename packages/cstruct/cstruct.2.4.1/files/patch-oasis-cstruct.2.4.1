--- ./myocamlbuild.ml
+++ ./myocamlbuild.ml
@@ -1,5 +1,5 @@
 (* OASIS_START *)
-(* DO NOT EDIT (digest: 4d44dad3b40a3deddd53d2503c1a4202) *)
+(* DO NOT EDIT (digest: fbe9c33b2a561faaac168f4ca7a87ec1) *)
 module OASISGettext = struct
 (* # 22 "src/oasis/OASISGettext.ml" *)
 
@@ -177,6 +177,28 @@
     else
       s
 
+  let exists f str =
+    let rec iter i =
+      if i < 0 then
+        false
+      else if f str.[i] then
+        true
+      else
+        iter (pred i)
+    in
+      iter (String.length str - 1)
+
+  let is_digit c =
+    '0' <= c && c <= '9'
+
+  let is_alpha c =
+    ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')
+
+  let is_whitespace =
+    function
+      | ' ' | '\r' | '\n' | '\t' -> true
+      |  _  -> false
+
 end
 
 module OASISUtils = struct
@@ -440,7 +462,7 @@
 end
 
 
-# 443 "myocamlbuild.ml"
+# 465 "myocamlbuild.ml"
 module BaseEnvLight = struct
 (* # 22 "src/base/BaseEnvLight.ml" *)
 
@@ -520,7 +542,7 @@
 end
 
 
-# 523 "myocamlbuild.ml"
+# 545 "myocamlbuild.ml"
 module MyOCamlbuildFindlib = struct
 (* # 22 "src/plugins/ocamlbuild/MyOCamlbuildFindlib.ml" *)
 
@@ -597,7 +619,9 @@
     with Not_found -> s
 
   (* ocamlfind command *)
-  let ocamlfind x = S[Sh (exec_from_conf "ocamlfind"); x]
+  let ocamlfind x = S[Sh (
+    Ocamlbuild_pack.Shell.quote_filename_if_needed
+      (exec_from_conf "ocamlfind") ); x]
 
   (* This lists all supported packages. *)
   let find_packages () =
@@ -881,7 +905,7 @@
 end
 
 
-# 884 "myocamlbuild.ml"
+# 908 "myocamlbuild.ml"
 open Ocamlbuild_plugin;;
 let package_default =
   {
@@ -898,7 +922,15 @@
        [
           (["oasis_library_cstruct_ccopt"; "compile"],
             [
-               (OASISExpr.EBool true,
+               (OASISExpr.EBool true, S []);
+               (OASISExpr.EOr
+                  (OASISExpr.ETest ("system", "win32"),
+                    OASISExpr.ETest ("system", "win64")),
+                 S [A "-ccopt"; A "/Ox"]);
+               (OASISExpr.ENot
+                  (OASISExpr.EOr
+                     (OASISExpr.ETest ("system", "win32"),
+                       OASISExpr.ETest ("system", "win64"))),
                  S [A "-ccopt"; A "-O3"; A "-ccopt"; A "-Wall"])
             ])
        ];
@@ -917,6 +949,6 @@
 
 let dispatch_default = MyOCamlbuildBase.dispatch_default conf package_default;;
 
-# 921 "myocamlbuild.ml"
+# 953 "myocamlbuild.ml"
 (* OASIS_STOP *)
 Ocamlbuild_plugin.dispatch dispatch_default;;
--- ./setup.ml
+++ ./setup.ml
@@ -1,7 +1,7 @@
 (* setup.ml generated for the first time by OASIS v0.4.6 *)
 
 (* OASIS_START *)
-(* DO NOT EDIT (digest: 8a18d756a3833145c2976b25bc328c5f) *)
+(* DO NOT EDIT (digest: 481888d200957bc4e15ada1b627376f0) *)
 (*
    Regenerated by OASIS v0.4.8
    Visit http://oasis.forge.ocamlcore.org for more information and
@@ -184,6 +184,28 @@
     else
       s
 
+  let exists f str =
+    let rec iter i =
+      if i < 0 then
+        false
+      else if f str.[i] then
+        true
+      else
+        iter (pred i)
+    in
+      iter (String.length str - 1)
+
+  let is_digit c =
+    '0' <= c && c <= '9'
+
+  let is_alpha c =
+    ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')
+
+  let is_whitespace =
+    function
+      | ' ' | '\r' | '\n' | '\t' -> true
+      |  _  -> false
+
 end
 
 module OASISUtils = struct
@@ -459,6 +481,97 @@
 
   module Unix = OASISUnixPath
 
+  let bash_cmd = ref ( fun () -> "" )
+
+  let use_bash () = ( !bash_cmd () ) <> ""
+
+  let generic_quote quotequote s =
+    let l = String.length s in
+    let b = Buffer.create (l + 20) in
+      Buffer.add_char b '\'';
+      for i = 0 to l - 1 do
+        if s.[i] = '\'' then
+          Buffer.add_string b quotequote
+        else
+          Buffer.add_char b  s.[i]
+      done;
+      Buffer.add_char b '\'';
+      Buffer.contents b
+
+  let unixquote = generic_quote "'\\''"
+
+  let win = Sys.os_type = "Win32"
+
+  let quote str =
+    if win && use_bash () then
+      unixquote str
+    else
+      quote str
+
+  let get_naccu accu str first pos =
+    if first = pos then
+      accu
+    else
+      let nlen = pos - first in
+      let nstr = String.sub str first nlen in
+        if nlen = 1 && nstr = "." then
+          accu
+        else if nlen = 2 && nstr = ".." then
+          match accu with
+            | []      -> [ nstr ]
+            | ".."::_ -> nstr::accu
+            | hd::tl  -> tl
+        else
+          nstr::accu
+
+  let is_path_sep = function
+    | '\\' | '/' -> true
+    | _ -> false
+
+
+  let uniform_path path_sep = function
+    | "" -> ""  | str ->
+        let rec iter accu str len first pos =
+          if pos >= len then
+            List.rev (get_naccu accu str first pos)
+          else
+            let next = succ pos in
+              match is_path_sep str.[pos] with
+                | true -> iter (get_naccu accu str first pos) str len next next
+                | false -> iter accu str len first next
+        in
+          let is_unix_root = is_path_sep str.[0] in
+          let len = String.length str in
+          let next_sep = len > 1 && is_path_sep str.[1] in
+          let is_network_root = is_unix_root && next_sep in
+          let is_currel = str.[0] = '.' && ( next_sep || len = 1 ) in
+          let l = iter [] str len 0 0 in
+          let l_min =
+            match l with
+              | [] -> [ "" ]
+              | _ -> l
+          in
+          let l =
+            if is_network_root then
+              ""::""::l_min
+            else if is_unix_root then
+              ""::l_min
+            else if is_currel then
+              "."::l
+            else
+              match l with
+                | s :: [] ->
+                    if String.length s = 2 && s.[1] = ':' &&
+                      len > 2 && is_path_sep str.[2]
+                    then
+                      s :: [ "" ]
+                    else
+                      l
+                | _ -> l
+          in
+            String.concat path_sep l
+
+
 
   let make =
     function
@@ -472,22 +585,30 @@
     match Sys.os_type with
     | "Unix" | "Cygwin" -> ufn
     | "Win32" ->
-      make
-        (List.map
-           (fun p ->
-              if p = Unix.current_dir_name then
-                current_dir_name
-              else if p = Unix.parent_dir_name then
-                parent_dir_name
+      let path_sep =
+        if use_bash () then
+          "/"
               else
-                p)
-           (OASISString.nsplit ufn '/'))
+          "\\"
+      in
+      uniform_path path_sep ufn
     | os_type ->
       OASISUtils.failwithf
         (f_ "Don't know the path format of os_type %S when translating unix \
              filename. %S")
         os_type ufn
 
+  let ocamlfind_unquote dir =
+    match Sys.os_type with
+    | "Cygwin"
+    | "Win32" ->
+      let len = String.length dir in
+      if len < 3 || dir.[0] <> '"' || dir.[len - 1] <> '"' ||
+         String.contains dir ' ' = false then
+        dir
+      else
+        String.sub dir 1 (len - 2)
+    | _ -> dir
 
 end
 
@@ -1070,8 +1191,8 @@
 
 
   (* Range of allowed characters *)
-  let is_digit c = '0' <= c && c <= '9'
-  let is_alpha c = ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')
+  let is_digit = OASISString.is_digit
+  let is_alpha = OASISString.is_alpha
   let is_special = function | '.' | '+' | '-' | '~' -> true | _ -> false
 
 
@@ -2499,6 +2620,7 @@
       ~ctxt
       ~is_native
       ~source_file_exists
+      ~ext_obj
       (cs, bs, obj) =
 
     let find_module ext modul =
@@ -2512,12 +2634,12 @@
         | [ m ] -> (find_module ".cmi" m,
             find_module ".cmo" m,
             find_module ".cmx" m,
-            find_module ".o" m,
+            find_module ext_obj m,
             fun x -> x)
         | _ -> ([cs.cs_name ^ ".cmi"],
             [cs.cs_name ^ ".cmo"],
             [cs.cs_name ^ ".cmx"],
-            [cs.cs_name ^ ".o"],
+            [cs.cs_name ^ ext_obj],
             OASISUnixPath.concat bs.bs_path)
     in
     List.map (List.map f) (
@@ -2877,26 +2999,170 @@
   open OASISUtils
   open OASISMessage
 
+  let is_dubious_char = function
+    | '+' | '~' | ':' | '.' | '-' | '_' | '/' | '\\' -> false
+    | c ->
+      OASISString.is_digit c = false &&
+      OASISString.is_alpha c = false
 
-  (* TODO: I don't like this quote, it is there because $(rm) foo expands to
-   * 'rm -f' foo...
-  *)
-  let run ~ctxt ?f_exit_code ?(quote=true) cmd args =
+
+  let win_quote_needed str =
+    let f = function
+      | 'a' .. 'z'  | 'A' .. 'Z' | '0' .. '9'
+      | '_' | '-' | '~' | '.' | ':' | ',' | '\\' -> false
+      | _ -> true
+    in
+      str = "" || OASISString.exists f str
+
+  let is_simple_command str =
+    String.length str > 0 &&
+    not (OASISString.exists is_dubious_char str)
+
+  let is_path_sep = function
+    | '/' | '\\' -> true
+    | _ -> false
+
+  let starts_with_absolute_path cmd =
+    let len = String.length cmd in
+      if len < 3 then
+        false
+      else
+        let c0 = cmd.[0] in
+        let c1 = cmd.[1] in
+          if is_path_sep c0 && is_path_sep c1 then
+            true
+          else if len = 3 then
+            false
+          else
+            OASISString.is_alpha c0 && c1 = ':' && is_path_sep cmd.[2]
+
+  let exe_exts = lazy
+    begin
+      let exts =
+        try
+          OASISString.nsplit
+            (Sys.getenv "PATHEXT")
+            ';'
+        with
+          | Not_found -> []
+      in
+      let exts' =
+        List.filter
+          ( fun a -> a <> "" && a.[0] = '.' && a <> ".exe" )
+          (List.map OASISString.lowercase_ascii exts) (* windows file system doesn't care *)
+      in
+        ".exe"::exts'
+    end
+
+  let exe_file_exists fln =
+    Sys.file_exists fln ||
+    List.exists
+      (fun a -> Sys.file_exists ( fln ^ a ) )
+      (Lazy.force exe_exts)
+
+
+  let quote_anyway cmd =
+    if Sys.os_type <> "Win32" then
+      false
+    else if is_simple_command cmd then
+      true
+    else
+      OASISString.exists OASISString.is_whitespace cmd &&
+        starts_with_absolute_path cmd &&
+        exe_file_exists cmd
+
+
+  let run_bash ~ctxt ?f_exit_code ?(quote=true) cmd args =
+    let fn = Filename.temp_file "oasis-" ".sh" in
+    let fn_deleted = ref false in
+      try
+        begin
+          let ch = open_out_bin fn in
+          let ch_closed = ref false in
+            try
+              begin
     let cmd =
-      if quote then
-        if Sys.os_type = "Win32" then
-          if String.contains cmd ' ' then
-            (* Double the 1st double quote... win32... sigh *)
-            "\""^(Filename.quote cmd)
+                  if quote || quote_anyway cmd then
+                    OASISHostPath.quote (OASISHostPath.of_unix cmd)
+                  else
+                    cmd
+                in
+                  output_string ch cmd;
+                  List.iter
+                    ( fun s -> output_char ch ' '; output_string ch s )
+                    args ;
+                  output_char ch '\n';
+                  ch_closed:=true ;
+                  close_out ch;
+                  let bash = !OASISHostPath.bash_cmd () in
+                  let add_quotes = ref false in
+                  let shell_cmd =
+                    if Sys.os_type <> "Win32" then
+                      Filename.quote bash
+                    else
+                      if win_quote_needed bash = false then
+                        bash
+                      else
+                        begin
+                          add_quotes := true;
+                          Filename.quote bash
+                        end
+                  in
+                  let cmdline_orig = String.concat " " (cmd :: args) in
+                  let cmdline =
+                    let s = shell_cmd ^ " " ^ (Filename.quote fn) in
+                      if !add_quotes then
+                        "\"" ^ s ^ "\""
           else
+                        s
+                  in
+                    info ~ctxt (f_ "Running command '%s'") cmdline_orig;
+                    let ret = Sys.command cmdline in
+                      fn_deleted := true;
+                      Sys.remove fn;
+                      match f_exit_code, ret with
+                        | None, 0 -> ()
+                        | None, i ->
+                            failwithf
+                              (f_ "Command '%s' terminated with error code %d")
+                              cmdline_orig i
+                        | Some f, i ->
+                            f i
+              end
+            with
+              | x when !ch_closed = false ->
+                  close_out_noerr ch;
+                  raise x
+        end
+      with
+        | x when !fn_deleted = false ->
+            (try Sys.remove fn with _ -> () ) ;
+            raise x
+
+  let run_default ~ctxt ?f_exit_code ?(quote=true) cmd args =
+    let add_quotes = ref false in
+    let cmd =
+      if quote || quote_anyway cmd then
+        if Sys.os_type = "Win32" then
+          begin
+            if win_quote_needed cmd = false then
             cmd
         else
+              begin
+                add_quotes := true;
+                Filename.quote cmd
+              end
+          end
+        else
           Filename.quote cmd
       else
         cmd
     in
     let cmdline =
-      String.concat " " (cmd :: args)
+      let s = String.concat " " (cmd :: args) in
+        match !add_quotes with
+          | true -> "\"" ^ s ^ "\""
+          | false -> s
     in
     info ~ctxt (f_ "Running command '%s'") cmdline;
     match f_exit_code, Sys.command cmdline with
@@ -2908,6 +3174,13 @@
       | Some f, i ->
         f i
 
+  let run ~ctxt ?f_exit_code ?quote cmd args =
+    if OASISHostPath.use_bash () &&
+       (Sys.os_type <> "Win32" || not (Filename.check_suffix cmd ".bat"))
+    then
+      run_bash ~ctxt ?f_exit_code ?quote cmd args
+    else
+      run_default ~ctxt ?f_exit_code ?quote cmd args
 
   let run_read_output ~ctxt ?f_exit_code cmd args =
     let fn =
@@ -3018,7 +3291,7 @@
     ) alternatives
 
 
-  let which ~ctxt prg =
+  let which ?(plain=false) ?ctxt prg =
     let path_sep =
       match Sys.os_type with
         | "Win32" ->
@@ -3030,11 +3303,19 @@
     let exec_ext =
       match Sys.os_type with
         | "Win32" ->
-          "" :: (OASISString.nsplit (Sys.getenv "PATHEXT") path_sep)
+          "" :: (List.map
+                   OASISString.lowercase_ascii
+                   (OASISString.nsplit (Sys.getenv "PATHEXT") path_sep))
         | _ ->
           [""]
     in
+    let p =
     find_file ~case_sensitive:false [path_lst; [prg]] exec_ext
+    in
+    if plain then
+      p
+    else
+      OASISHostPath.of_unix p
 
 
   (**/**)
@@ -3051,35 +3332,44 @@
       dn
 
 
-  let q = Filename.quote
+  let q s = OASISHostPath.quote (OASISHostPath.of_unix s)
   (**/**)
 
-
   let cp ~ctxt ?(recurse=false) src tgt =
     if recurse then
-      match Sys.os_type with
-        | "Win32" ->
-          OASISExec.run ~ctxt
-            "xcopy" [q src; q tgt; "/E"]
-        | _ ->
-          OASISExec.run ~ctxt
-            "cp" ["-r"; q src; q tgt]
+      if Sys.os_type = "Win32" && OASISHostPath.use_bash () = false then
+        let tgt_real =
+          if Sys.file_exists tgt = false then
+            begin
+              OASISExec.run ~ctxt "md" [q tgt];
+              tgt
+            end
     else
-      OASISExec.run ~ctxt
-        (match Sys.os_type with
-          | "Win32" -> "copy"
-          | _ -> "cp")
-        [q src; q tgt]
-
+            let base = Filename.basename src in
+            if base = "." then
+              tgt
+            else
+              let tgt_real = Filename.concat tgt base in
+              if Sys.file_exists tgt_real = false then
+                OASISExec.run ~ctxt "md" [q tgt_real];
+              tgt_real
+        in
+        OASISExec.run ~ctxt "xcopy" [q src; q tgt_real; "/E" ; "/Q" ; "/Y"]
+      else
+        OASISExec.run ~ctxt "cp" ["-r"; q src; q tgt]
+    else if Sys.os_type = "Win32" && OASISHostPath.use_bash () = false then
+      OASISExec.run ~ctxt "copy" [q src; q tgt ; "/Y"]
+    else
+      OASISExec.run ~ctxt "cp" [q src; q tgt]
 
   let mkdir ~ctxt tgt =
     OASISExec.run ~ctxt
-      (match Sys.os_type with
-        | "Win32" -> "md"
-        | _ -> "mkdir")
+      ( if Sys.os_type = "Win32" && not (OASISHostPath.use_bash ()) then
+          "md"
+        else
+          "mkdir" )
       [q tgt]
 
-
   let rec mkdir_parent ~ctxt f tgt =
     let tgt =
       fix_dir tgt
@@ -3105,10 +3395,9 @@
 
   let rmdir ~ctxt tgt =
     if Sys.readdir tgt = [||] then begin
-      match Sys.os_type with
-        | "Win32" ->
+      if Sys.os_type = "Win32" && OASISHostPath.use_bash () = false then
           OASISExec.run ~ctxt "rd" [q tgt]
-        | _ ->
+      else
           OASISExec.run ~ctxt "rm" ["-r"; q tgt]
     end else begin
       OASISMessage.error ~ctxt
@@ -3162,7 +3451,7 @@
 end
 
 
-# 3165 "setup.ml"
+# 3454 "setup.ml"
 module BaseEnvLight = struct
 (* # 22 "src/base/BaseEnvLight.ml" *)
 
@@ -3242,7 +3531,7 @@
 end
 
 
-# 3245 "setup.ml"
+# 3534 "setup.ml"
 module BaseContext = struct
 (* # 22 "src/base/BaseContext.ml" *)
 
@@ -3333,7 +3622,7 @@
   let var_lxr = Genlex.make_lexer []
 
 
-  let rec var_expand str =
+  let rec var_expand ?(quoted=false) str =
     let buff =
       Buffer.create ((String.length str) * 2)
     in
@@ -3361,7 +3650,11 @@
              | [Genlex.Ident "ocaml_escaped"; Genlex.String s] ->
                String.escaped s
              | [Genlex.Ident nm] ->
-               var_get nm
+                 let s = var_get nm in
+                 if quoted then
+                   OASISHostPath.quote s
+                 else
+                   s
              | _ ->
                failwithf
                  (f_ "Unknown expression '%s' in variable expansion of %s.")
@@ -3899,9 +4192,11 @@
     in
     let findlib_dir pkg =
       let dir =
+        OASISHostPath.of_unix (
+          OASISHostPath.ocamlfind_unquote (
         OASISExec.run_read_one_line ~ctxt:!BaseContext.default
           (ocamlfind ())
-          ["query"; "-format"; "%d"; pkg]
+              ["query"; "-format"; "%d"; pkg] ) )
       in
       if Sys.file_exists dir && Sys.is_directory dir then
         dir
@@ -4031,6 +4326,9 @@
       match nm with
         | "ocaml_version" ->
           "version", chop_version_suffix
+        | "standard_library"
+        | "standard_library_default" ->
+            nm, ( fun x -> OASISHostPath.of_unix x)
         | _ -> nm, (fun x -> x)
     in
     var_redefine
@@ -4170,15 +4468,43 @@
 
 
   let (/) a b =
-    if os_type () = Sys.os_type then
+    let os = os_type () in
+    if os = Sys.os_type then
+      if Sys.os_type = "Win32" && OASISHostPath.use_bash () then
+        OASISUnixPath.concat a b
+      else
       Filename.concat a b
-    else if os_type () = "Unix" || os_type () = "Cygwin" then
+    else if os = "Unix" || os = "Cygwin" then
       OASISUnixPath.concat a b
     else
-      OASISUtils.failwithf (f_ "Cannot handle os_type %s filename concat")
-        (os_type ())
+      OASISUtils.failwithf (f_ "Cannot handle os_type %s filename concat") os
   (**/**)
 
+  let auto_bash =
+    lazy (
+      try
+        let bash = OASISFileUtil.which ~plain:true "bash" in
+        let sh = Filename.concat (Filename.dirname bash) "sh.exe" in
+        if Sys.file_exists sh then
+          sh
+        else
+          bash
+      with
+      | Not_found | Sys_error _ -> "" )
+
+  let auto_bash () =
+    if Sys.os_type <> "Win32" then
+      ""
+    else
+      Lazy.force auto_bash
+
+  let bash_cmd =
+    var_define
+     ~short_desc:(fun () -> s_ "Enforced bash shell:")
+      ~cli:CLIAuto
+      ~arg_help:"program"
+      "use_bash"
+      auto_bash
 
   let prefix =
     p "prefix"
@@ -4186,10 +4512,30 @@
       (fun () ->
          match os_type () with
            | "Win32" ->
+            let getenv w =
+              try
+                Some(Sys.getenv w)
+              with
+              | Not_found -> None
+            in
+            let s =
+              if Sys.word_size = 64 then
+                getenv "ProgramW6432"
+              else
+                None
+            in
+            let s =
+              if s = None then
+                getenv "PROGRAMFILES"
+              else
+                s
+            in
              let program_files =
-               Sys.getenv "PROGRAMFILES"
+              match s with
+              | None -> "C:\\Program Files"
+              | Some x -> x
              in
-             program_files/(pkg_name ())
+            OASISHostPath.of_unix (program_files/(pkg_name ()))
            | _ ->
              "/usr/local")
 
@@ -4275,7 +4621,11 @@
   let docdir =
     p "docdir"
       (fun () -> s_ "Documentation root")
-      (fun () -> "$datarootdir"/"doc"/"$pkg_name")
+      (fun () ->
+        match os_type () with
+          | "Win32" -> "$datarootdir"/"doc"/ ( pkg_name () )
+          | _ -> "$datarootdir"/"doc"/"$pkg_name"
+      )
 
 
   let htmldir =
@@ -4349,9 +4699,10 @@
       ~short_desc:(fun () -> s_ "Remove a file.")
       "rm"
       (fun () ->
-         match os_type () with
-           | "Win32" -> "del"
-           | _ -> "rm -f")
+         if not (OASISHostPath.use_bash ()) && os_type () = "Win32" then
+           "del"
+         else
+           "rm -f" )
 
 
   let rmdir =
@@ -4359,9 +4710,10 @@
       ~short_desc:(fun () -> s_ "Remove a directory.")
       "rmdir"
       (fun () ->
-         match os_type () with
-           | "Win32" -> "rd"
-           | _ -> "rm -rf")
+         if not (OASISHostPath.use_bash ()) && os_type () = "Win32" then
+           "rd"
+         else
+           "rm -rf")
 
 
   let debug =
@@ -4425,14 +4777,24 @@
            let has_native_dynlink =
              let ocamlfind = ocamlfind () in
              try
-               let fn =
+               let fn1 =
+                 OASISHostPath.ocamlfind_unquote (
+                   OASISExec.run_read_one_line
+                     ~ctxt:!BaseContext.default
+                     ocamlfind
+                     ["query"; "-predicates"; "native"; "dynlink";
+                      "-format"; "%d"] )
+               in
+               let fn2 =
+                 OASISHostPath.ocamlfind_unquote (
                  OASISExec.run_read_one_line
                    ~ctxt:!BaseContext.default
                    ocamlfind
                    ["query"; "-predicates"; "native"; "dynlink";
-                    "-format"; "%d/%a"]
+                      "-format"; "%a"]
+                 )
                in
-               Sys.file_exists fn
+               fn1 <> "" && fn2 <> "" && Sys.file_exists (Filename.concat fn1 fn2)
              with _ ->
                false
            in
@@ -4459,6 +4821,8 @@
     rpkg := Some pkg;
     List.iter (fun f -> f pkg.oasis_version) !var_cond
 
+  let () =
+    OASISHostPath.bash_cmd := bash_cmd
 end
 
 module BaseFileAB = struct
@@ -4734,6 +5098,7 @@
         ~source_file_exists:(fun fn ->
           OASISFileUtil.file_exists_case (OASISHostPath.of_unix fn))
         ~is_native:(bool_of_string (is_native ()))
+        ~ext_obj:(ext_obj())
         (cs, bs, obj)
     in
     let evs =
@@ -4759,7 +5124,7 @@
     OASISExec.run ~ctxt:!BaseContext.default ~quote:false
       (var_expand cmd)
       (List.map
-         var_expand
+         (var_expand ~quoted:true)
          (args @ (Array.to_list extra_args)))
 
 
@@ -5033,9 +5398,25 @@
 
   let configure ~ctxt t args =
     (* Run configure *)
+
+    let rec f = function
+      | [] ->
+        begin
+          try
+            let x = Sys.getenv "USE_BASH" in
+              OASISHostPath.bash_cmd := (fun () -> x);
+          with
+            _ -> ()
+        end
+      | "--use-bash"::x::_ ->
+          OASISHostPath.bash_cmd := (fun () -> x);
+      | _::tl -> f tl
+    in
+      f (Array.to_list args);
     BaseCustom.hook
       t.package.conf_custom
       (fun () ->
+           OASISHostPath.bash_cmd := BaseStandardVar.bash_cmd;
          (* Reload if preconf has changed it *)
          begin
            try
@@ -5665,7 +6046,7 @@
 end
 
 
-# 5668 "setup.ml"
+# 6049 "setup.ml"
 module InternalConfigurePlugin = struct
 (* # 22 "src/plugins/internal/InternalConfigurePlugin.ml" *)
 
@@ -5945,12 +6326,21 @@
   let install_findlib_ev = "install-findlib"
 
 
-  (* TODO: this can be more generic and used elsewhere. *)
-  let win32_max_command_line_length = 8000
-
-
   let split_install_command ocamlfind findlib_name meta files =
-    if Sys.os_type = "Win32" then
+    if Sys.os_type <> "Win32" then
+      ["install" :: findlib_name :: meta :: files]
+    else
+      let f s =
+        OASISHostPath.quote ( OASISHostPath.of_unix s )
+      in
+      let files = List.map f files in
+      let meta = f meta  in
+      let win32_max_command_line_length =
+        if OASISHostPath.use_bash () = false then
+          7900
+        else
+          30000
+      in
       (* Arguments for the first command: *)
       let first_args = ["install"; findlib_name; meta] in
       (* Arguments for remaining commands: *)
@@ -6008,10 +6398,11 @@
                     let cmds = split other_args others in
                     cmd :: cmds
       in
+      if files = [] then
+        [ first_args ]
+      else
       (* The first command does not use -add: *)
       split first_args files
-    else
-      ["install" :: findlib_name :: meta :: files]
 
 
   let install =
@@ -6471,7 +6862,7 @@
 end
 
 
-# 6474 "setup.ml"
+# 6865 "setup.ml"
 module OCamlbuildCommon = struct
 (* # 22 "src/plugins/ocamlbuild/OCamlbuildCommon.ml" *)
 
@@ -6844,7 +7235,7 @@
 end
 
 
-# 6847 "setup.ml"
+# 7238 "setup.ml"
 module CustomPlugin = struct
 (* # 22 "src/plugins/custom/CustomPlugin.ml" *)
 
@@ -6976,7 +7367,7 @@
 end
 
 
-# 6979 "setup.ml"
+# 7370 "setup.ml"
 open OASISTypes;;
 
 let setup_t =
@@ -7374,7 +7765,19 @@
                       bs_c_sources = ["cstruct_stubs.c"];
                       bs_data_files = [];
                       bs_findlib_extra_files = [];
-                      bs_ccopt = [(OASISExpr.EBool true, ["-O3"; "-Wall"])];
+                      bs_ccopt =
+                        [
+                           (OASISExpr.EBool true, []);
+                           (OASISExpr.EOr
+                              (OASISExpr.ETest ("system", "win32"),
+                                OASISExpr.ETest ("system", "win64")),
+                             ["/Ox"]);
+                           (OASISExpr.ENot
+                              (OASISExpr.EOr
+                                 (OASISExpr.ETest ("system", "win32"),
+                                   OASISExpr.ETest ("system", "win64"))),
+                             ["-O3"; "-Wall"])
+                        ];
                       bs_cclib = [(OASISExpr.EBool true, [])];
                       bs_dlllib = [(OASISExpr.EBool true, [])];
                       bs_dllpath = [(OASISExpr.EBool true, [])];
@@ -9130,7 +9533,7 @@
        };
      oasis_fn = Some "_oasis";
      oasis_version = "0.4.8";
-     oasis_digest = Some "\218p\129  \019[\028\020b\147\002\153\152\1487";
+     oasis_digest = Some "\213\rK\252\184A\027I\\\217\018\133b\183[\t";
      oasis_exec = None;
      oasis_setup_args = [];
      setup_update = false
@@ -9138,7 +9541,7 @@
 
 let setup () = BaseSetup.setup setup_t;;
 
-# 9142 "setup.ml"
+# 9545 "setup.ml"
 let setup_t = BaseCompat.Compat_0_4.adapt_setup_t setup_t
 open BaseCompat.Compat_0_4
 (* OASIS_STOP *)

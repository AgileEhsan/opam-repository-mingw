--- ./bootstrap.ml
+++ ./bootstrap.ml
@@ -166,6 +166,7 @@
     print_endline cmd;
     Unix.open_process_in cmd
   in
+  set_binary_mode_in ic false;
   let rec loop acc =
     match input_line ic with
     | exception End_of_file ->
@@ -222,7 +223,7 @@
   !newlines
 
 let read_file fn =
-  let ic = open_in fn in
+  let ic = open_in_bin fn in
   let data = really_input_string ic (in_channel_length ic) in
   close_in ic;
   data
@@ -230,7 +231,7 @@
 let generated_file = "boot.ml"
 
 let generate_file_with_all_the_sources () =
-  let oc = open_out generated_file in
+  let oc = open_out_bin generated_file in
   let pos_in_generated_file = ref 1 in
   let pr fmt =
     ksprintf (fun s ->
--- ./src/action.ml
+++ ./src/action.ml
@@ -269,7 +269,14 @@
       return ()
     | Create_file fn ->
       let fn = Path.to_string fn in
-      if Sys.file_exists fn then Sys.remove fn;
+      if Sys.file_exists fn then (
+        try
+          Sys.remove fn
+        with
+        | Sys_error _ when Sys.os_type = "Win32" ->
+          (try Unix.chmod fn 0o666 with Unix.Unix_error _ -> ());
+          Sys.remove fn
+      );
       Unix.close (Unix.openfile fn [O_CREAT; O_TRUNC; O_WRONLY] 0o666);
       return ()
     | Copy (src, dst) ->
@@ -317,8 +324,17 @@
         run ~dir ~env ~env_extra ~stdout_to ~stderr_to path [arg; cmd]
       end
     | Bash cmd ->
+      let shell =
+        if Sys.win32 = false then
+          "/bin/bash"
+        else
+          match Bin.which "bash" with
+          | None -> "C:\\cygwin\\bin\\bash.exe"
+          | Some x -> Path.to_string x
+      in
+      let cmd = if Sys.win32 then " " ^ cmd else cmd in
       run ~dir ~env ~env_extra ~stdout_to ~stderr_to
-        (Path.absolute "/bin/bash")
+        (Path.absolute shell)
         ["-e"; "-u"; "-o"; "pipefail"; "-c"; cmd]
     | Update_file (fn, s) ->
       let fn = Path.to_string fn in
--- ./src/context.ml
+++ ./src/context.ml
@@ -261,7 +261,7 @@
     ; toplevel_path = Option.map (get_env env "OCAML_TOPLEVEL_PATH") ~f:Path.absolute
 
     ; ocaml_bin  = dir
-    ; ocaml      = Path.relative dir "ocaml"
+    ; ocaml      = Path.relative dir (if Sys.win32 then "ocaml.exe" else "ocaml")
     ; ocamlc
     ; ocamlopt   = best_prog "ocamlopt"
     ; ocamllex   = get_prog  "ocamllex"
--- ./src/future.ml
+++ ./src/future.ml
@@ -226,8 +226,9 @@
     fn
 
   let destroy fn =
-    Sys.remove fn;
-    tmp_files := String_set.remove fn !tmp_files
+    match Sys.remove fn with
+    | exception Sys_error _ -> () (* good luck at_exit *)
+    | _ -> tmp_files := String_set.remove fn !tmp_files
 end
 
 let run_capture_gen ?dir ?env fail_mode prog args ~f =
@@ -428,7 +429,7 @@
   let get_std_output ~default = function
     | Terminal -> (default, None)
     | File fn ->
-      let fd = Unix.openfile fn [O_WRONLY; O_CREAT; O_TRUNC] 0o666 in
+      let fd = Unix.openfile fn [O_WRONLY; O_CREAT; O_TRUNC; O_SHARE_DELETE] 0o666 in
       (fd, Some (Fd fd))
     | Opened_file { desc; tail; _ } ->
       let fd =
@@ -460,7 +461,7 @@
           match job.stdout_to, job.stderr_to with
           | Terminal, _ | _, Terminal ->
             let fn = Temp.create "jbuilder" ".output" in
-            (Some fn, Unix.openfile fn [O_WRONLY] 0)
+            (Some fn, Unix.openfile fn [O_WRONLY; O_SHARE_DELETE] 0)
           | _ ->
             (None, Unix.stdin)
         in
--- ./src/gen_rules.ml
+++ ./src/gen_rules.ml
@@ -285,7 +285,16 @@
       Build.run ~dir ?stdout_to ~context:ctx ?extra_targets prog args
 
     let bash ?dir ?stdout_to ?extra_targets cmd =
-      run (Dep (Path.absolute "/bin/bash")) ?dir ?stdout_to ?extra_targets
+      let shell =
+        if Sys.win32 = false then
+          "/bin/bash"
+        else
+          match Bin.which "bash" with
+          | None -> "C:\\cygwin\\bin\\bash.exe"
+          | Some x -> Path.to_string x
+      in
+      let cmd = if Sys.win32 then " " ^ cmd else cmd in
+      run (Dep (Path.absolute shell)) ?dir ?stdout_to ?extra_targets
         [ As ["-e"; "-u"; "-o"; "pipefail"; "-c"; cmd] ]
 
     let system ?dir ?stdout_to ?extra_targets cmd ~needed_to =
--- ./src/import.ml
+++ ./src/import.ml
@@ -355,6 +355,16 @@
         };
       f lb)
 
+let input_line =
+  if not Sys.win32 then input_line else
+  fun ic ->
+    let s = input_line ic in
+    let len_m1 = String.length s - 1 in
+    if len_m1 < 0 || String.get s len_m1 <> '\r' then
+      s
+    else
+      String.sub s ~pos:0 ~len:len_m1
+
 let input_lines =
   let rec loop ic acc =
     match input_line ic with

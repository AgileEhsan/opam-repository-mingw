diff --git a/src/command.ml b/src/command.ml
index 8914fba..d6cefbc 100644
--- a/src/command.ml
+++ b/src/command.ml
@@ -261,7 +261,7 @@ let flatten_commands quiet pretend cmd =
 
 let execute_many ?(quiet=false) ?(pretend=false) cmds =
   add_parallel_stat (List.length cmds);
-  let degraded = !*My_unix.is_degraded || Sys.os_type = "Win32" in
+  let degraded = !*My_unix.is_degraded in
   let jobs = !jobs in
   if jobs < 0 then invalid_arg "jobs < 0";
   let max_jobs = if jobs = 0 then None else Some jobs in
diff --git a/src/my_std.ml b/src/my_std.ml
index ddd3df2..b1d659b 100644
--- a/src/my_std.ml
+++ b/src/my_std.ml
@@ -271,13 +271,107 @@ let sys_file_exists x =
       try Array.iter (fun x -> if x = basename then raise Exit) a; false
       with Exit -> true
 
+let command_plain = function
+| [| |] -> 0
+| margv ->
+  let rec waitpid a b =
+    match Unix.waitpid a b with
+    | exception (Unix.Unix_error(Unix.EINTR,_,_)) -> waitpid a b
+    | x -> x
+  in
+  let pid = Unix.(create_process margv.(0) margv stdin stdout stderr) in
+  let pid', process_status = waitpid [] pid in
+  assert (pid = pid');
+  match process_status with
+  | Unix.WEXITED n -> n
+  | Unix.WSIGNALED _ -> 2 (* like OCaml's uncaught exceptions *)
+  | Unix.WSTOPPED _ -> 127
+
+(* can't use Lexers because of circular dependency *)
+let split_path_win str =
+  let rec aux pos =
+    try
+      let i = String.index_from str pos ';' in
+      let len = i - pos in
+      if len = 0 then
+        aux (succ i)
+      else
+        String.sub str pos (i - pos) :: aux (succ i)
+    with Not_found | Invalid_argument _ ->
+      let len = String.length str - pos in
+      if len = 0 then [] else [String.sub str pos len]
+  in
+  aux 0
+
+let windows_shell = lazy begin
+  let rec iter = function
+  | [] -> [| "bash.exe" ; "--norc" ; "--noprofile" |]
+  | hd::tl ->
+    let dash = Filename.concat hd "dash.exe" in
+    if Sys.file_exists dash then [|dash|] else
+    let bash = Filename.concat hd "bash.exe" in
+    if Sys.file_exists bash = false then iter tl else
+    (* if sh.exe and bash.exe exist in the same dir, choose sh.exe *)
+    let sh = Filename.concat hd "sh.exe" in
+    if Sys.file_exists sh then [|sh|] else [|bash ; "--norc" ; "--noprofile"|]
+  in
+  Sys.getenv "PATH" |> split_path_win |> iter
+end
+
+let prep_windows_cmd cmd =
+  (* workaround known ocaml bug, remove later *)
+  if String.contains cmd '\t' && String.contains cmd ' ' = false then
+    " " ^ cmd
+  else
+    cmd
+
+let run_with_shell = function
+| "" -> 0
+| cmd ->
+  let cmd = prep_windows_cmd cmd in
+  let shell = Lazy.force windows_shell in
+  let qlen = Filename.quote cmd |> String.length in
+  (* old versions of dash had problems with bs *)
+  try
+    if qlen < 30_000 then
+      command_plain (Array.append shell [| "-ec" ; cmd |])
+    else begin
+      (* it can still work, if the called command is a cygwin tool *)
+      let ch_closed = ref false in
+      let file_deleted = ref false in
+      let fln,ch =
+        Filename.open_temp_file
+          ~mode:[Open_binary]
+          "ocamlbuildtmp"
+          ".sh"
+      in
+      try
+        let f_slash = String.map ( fun x -> if x = '\\' then '/' else x ) fln in
+        output_string ch cmd;
+        ch_closed:= true;
+        close_out ch;
+        let ret = command_plain (Array.append shell [| "-e" ; f_slash |]) in
+        file_deleted:= true;
+        Sys.remove fln;
+        ret
+      with
+      | x ->
+        if !ch_closed = false then
+          close_out_noerr ch;
+        if !file_deleted = false then
+          (try Sys.remove fln with _ -> ());
+        raise x
+    end
+  with
+  | (Unix.Unix_error _) as x ->
+    (* Sys.command doesn't raise an exception, so run_with_shell also won't
+       raise *)
+    Printexc.to_string x ^ ":" ^ cmd |> prerr_endline;
+    1
+
 let sys_command =
-  match Sys.os_type with
-  | "Win32" -> fun cmd ->
-      if cmd = "" then 0 else
-      let cmd = "bash --norc --noprofile -c "^Filename.quote cmd in
-      Sys.command cmd
-  | _ -> fun cmd -> if cmd = "" then 0 else Sys.command cmd
+  if Sys.win32 then run_with_shell
+  else fun cmd -> if cmd = "" then 0 else Sys.command cmd
 
 (* FIXME warning fix and use Filename.concat *)
 let filename_concat x y =
diff --git a/src/my_std.mli b/src/my_std.mli
index 32e742c..f0676a0 100644
--- a/src/my_std.mli
+++ b/src/my_std.mli
@@ -69,3 +69,6 @@ val lexbuf_of_string : ?name:string -> string -> Lexing.lexbuf
 
 val split_ocaml_version : (int * int * int * string) option
 (** (major, minor, patchlevel, rest) *)
+
+val windows_shell : string array Lazy.t
+val prep_windows_cmd : string -> string
diff --git a/src/ocamlbuild_executor.ml b/src/ocamlbuild_executor.ml
index 30c1a16..a436711 100644
--- a/src/ocamlbuild_executor.ml
+++ b/src/ocamlbuild_executor.ml
@@ -34,6 +34,7 @@ type job = {
   job_stdin   : out_channel;
   job_stderr  : in_channel;
   job_buffer  : Buffer.t;
+  job_pid     : int;
   mutable job_dying : bool;
 };;
 
@@ -76,6 +77,36 @@ let output_lines prefix oc buffer =
   in
   loop 0
 ;;
+
+let open_process_full_win cmd env =
+  let (in_read, in_write) = Unix.pipe () in
+  let (out_read, out_write) = Unix.pipe () in
+  let (err_read, err_write) = Unix.pipe () in
+  Unix.set_close_on_exec in_read;
+  Unix.set_close_on_exec out_write;
+  Unix.set_close_on_exec err_read;
+  let inchan = Unix.in_channel_of_descr in_read in
+  let outchan = Unix.out_channel_of_descr out_write in
+  let errchan = Unix.in_channel_of_descr err_read in
+  let argv =
+    Array.append
+      (Lazy.force Ocamlbuild_pack.My_std.windows_shell)
+      [| "-ec" ; Ocamlbuild_pack.My_std.prep_windows_cmd cmd |] in
+  let pid =
+    Unix.create_process_env argv.(0) argv env out_read in_write err_write in
+  Unix.close out_read;
+  Unix.close in_write;
+  Unix.close err_write;
+  (pid, inchan, outchan, errchan)
+
+let close_process_full_win (pid,inchan, outchan, errchan) =
+  close_in inchan;
+  close_out outchan;
+  close_in errchan;
+  snd(Unix.waitpid [] pid)
+
+
+
 (* ***)
 (*** execute *)
 (* XXX: Add test for non reentrancy *)
@@ -130,10 +161,16 @@ let execute
   (*** add_job *)
   let add_job cmd rest result id =
     (*display begin fun oc -> fp oc "Job %a is %s\n%!" print_job_id id cmd; end;*)
-    let (stdout', stdin', stderr') = open_process_full cmd env in
+    let (pid,stdout', stdin', stderr') =
+      if Sys.win32 then open_process_full_win cmd env else
+      let a,b,c = open_process_full cmd env in
+      -1,a,b,c
+    in
     incr jobs_active;
-    set_nonblock (doi stdout');
-    set_nonblock (doi stderr');
+    if not Sys.win32 then (
+      set_nonblock (doi stdout');
+      set_nonblock (doi stderr');
+    );
     let job =
       { job_id          = id;
         job_command     = cmd;
@@ -143,7 +180,8 @@ let execute
         job_stdin       = stdin';
         job_stderr      = stderr';
         job_buffer      = Buffer.create 1024;
-        job_dying       = false }
+        job_dying       = false;
+        job_pid         = pid }
     in
     outputs := FDM.add (doi stdout') job (FDM.add (doi stderr') job !outputs);
     jobs := JS.add job !jobs;
@@ -199,6 +237,7 @@ let execute
               try
                 read fd u 0 (Bytes.length u)
               with
+              | Unix.Unix_error(Unix.EPIPE,_,_) when Sys.win32 -> 0
               | Unix.Unix_error(e,_,_)  ->
                 let msg = error_message e in
                 display (fun oc -> fp oc
@@ -241,14 +280,19 @@ let execute
       decr jobs_active;
 
       (* PR#5371: we would get EAGAIN below otherwise *)
-      clear_nonblock (doi job.job_stdout);
-      clear_nonblock (doi job.job_stderr);
-
+      if not Sys.win32 then (
+        clear_nonblock (doi job.job_stdout);
+        clear_nonblock (doi job.job_stderr);
+      );
       do_read ~loop:true (doi job.job_stdout) job;
       do_read ~loop:true (doi job.job_stderr) job;
       outputs := FDM.remove (doi job.job_stdout) (FDM.remove (doi job.job_stderr) !outputs);
       jobs := JS.remove job !jobs;
-      let status = close_process_full (job.job_stdout, job.job_stdin, job.job_stderr) in
+      let status =
+        if Sys.win32 then
+          close_process_full_win (job.job_pid, job.job_stdout, job.job_stdin, job.job_stderr)
+        else
+          close_process_full (job.job_stdout, job.job_stdin, job.job_stderr) in
 
       let shown = ref false in
 
diff --git a/src/ocamlbuild_unix_plugin.ml b/src/ocamlbuild_unix_plugin.ml
index 29decf6..1baa2cf 100644
--- a/src/ocamlbuild_unix_plugin.ml
+++ b/src/ocamlbuild_unix_plugin.ml
@@ -51,10 +51,9 @@ let run_and_open s kont =
   let s =
     (* Be consistent! My_unix.run_and_open uses My_std.sys_command and
        sys_command uses bash. *)
-    if Sys.win32 then
-      "bash --norc --noprofile -c " ^ Filename.quote s
-    else
-      s
+    if Sys.win32 = false then s else
+    (Lazy.force My_std.windows_shell |> Array.to_list |> String.concat " ")
+    ^ " -ec " ^ Filename.quote s
   in
   let ic = Unix.open_process_in s in
   let close () =
diff --git a/src/shell.ml b/src/shell.ml
index 3b7bcb7..5896976 100644
--- a/src/shell.ml
+++ b/src/shell.ml
@@ -51,7 +51,7 @@ let chdir dir =
 let run args target =
   reset_readdir_cache ();
   let cmd = String.concat " " (List.map quote_filename_if_needed args) in
-  if !*My_unix.is_degraded || Sys.os_type = "Win32" then
+  if !*My_unix.is_degraded then
     begin
       Log.event cmd target Tags.empty;
       let st = sys_command cmd in
